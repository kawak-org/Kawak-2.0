// cryptoUtils.js - Utility functions for cryptographic operations
import { mnemonicToSeedSync, generateMnemonic, validateMnemonic } from "bip39"
import { Ed25519KeyIdentity } from "@dfinity/identity"
import nacl from "tweetnacl"
import * as bip39 from "bip39"
import { Principal } from "@dfinity/principal"
import { AccountIdentifier } from "@dfinity/ledger-icp"

/**
 * Converts a hex string to Uint8Array
 * @param {string} hexString - Hex string with or without '0x' prefix
 * @returns {Uint8Array} - Byte array
 */
function hexToBytes(hexString: string): Uint8Array {
  // Remove '0x' prefix if present
  const cleanHex = hexString.startsWith('0x') ? hexString.slice(2) : hexString
  
  // Ensure even length
  const paddedHex = cleanHex.length % 2 === 0 ? cleanHex : '0' + cleanHex
  
  // Convert to bytes
  const bytes = new Uint8Array(paddedHex.length / 2)
  for (let i = 0; i < paddedHex.length; i += 2) {
    bytes[i / 2] = parseInt(paddedHex.substr(i, 2), 16)
  }
  
  return bytes
}

/**
 * Derives key pair from a seed phrase
 * @param {string} seedPhrase - BIP39 mnemonic seed phrase
 * @returns {Object} - Tweet NaCl key pair
 */

export function deriveKeysFromSeedPhrase(seedPhrase: any) {
  if (!validateMnemonic(seedPhrase)) {
    throw new Error("Invalid seed phrase")
  }

  const seed = mnemonicToSeedSync(seedPhrase).slice(0, 32)
  return nacl.sign.keyPair.fromSeed(seed)
}

/**
 * Creates an Internet Computer identity from a key pair
 * @param {Object} keyPair - Tweet NaCl key pair
 * @returns {Ed25519KeyIdentity} - DFX identity
 */
export function createIdentityFromKeyPair(keyPair: any) {
  return Ed25519KeyIdentity.fromKeyPair(keyPair.publicKey, keyPair.secretKey)
}

export function generateSeedPhrase(input: any) {
  if (!input) {
    console.error("Empty input for seed phrase generation")
    return Promise.resolve(generateMnemonic())
  }

  try {
    // Check if input is a hex string (Ethereum address or signature)
    if (typeof input === 'string' && input.startsWith('0x')) {
      // For Ethereum addresses, use them directly as they're already valid hex
      // For signatures, we'll use a hash to avoid processing issues
      const hexString = input.slice(2) // Remove 0x prefix
      
      // If it's an Ethereum address (40 characters), use it directly
      if (hexString.length === 40) {
        // Ethereum address - use directly
        const encoder = new TextEncoder()
        const encodedInput = encoder.encode(hexString)

              return crypto.subtle.digest("SHA-256", encodedInput).then((hashBuffer) => {
          try {
            const entropy = new Uint8Array(hashBuffer.slice(0, 16))
            const mnemonic = bip39.entropyToMnemonic(entropy)

            if (!validateMnemonic(mnemonic)) {
              console.warn("Generated invalid mnemonic, falling back to random")
              return generateMnemonic()
            }

            return mnemonic
          } catch (err) {
            console.error("Error generating mnemonic from hash:", err)
            return generateMnemonic()
          }
        })
      } else {
        // For signatures or other hex strings, use a hash to avoid processing issues
        let hash = 0
        for (let i = 0; i < hexString.length; i++) {
          const char = hexString.charCodeAt(i)
          hash = ((hash << 5) - hash) + char
          hash = hash & hash // Convert to 32-bit integer
        }
        
        // Convert hash to a deterministic string
        const hashString = Math.abs(hash).toString(16).padStart(8, '0')
        
        // Use this as input for mnemonic generation
        const encoder = new TextEncoder()
        const encodedInput = encoder.encode(hashString)

        return crypto.subtle.digest("SHA-256", encodedInput).then((hashBuffer) => {
          try {
            const entropy = new Uint8Array(hashBuffer.slice(0, 16))
            const mnemonic = bip39.entropyToMnemonic(entropy)

            if (!validateMnemonic(mnemonic)) {
              console.warn("Generated invalid mnemonic, falling back to random")
              return generateMnemonic()
            }

            return mnemonic
          } catch (err) {
            console.error("Error generating mnemonic from hash:", err)
            return generateMnemonic()
          }
        })
      }
    } else {
      // Handle regular string input
      const encoder = new TextEncoder()
      const encodedInput = encoder.encode(input)

      return crypto.subtle.digest("SHA-256", encodedInput).then((hashBuffer) => {
        try {
          const entropy = new Uint8Array(hashBuffer.slice(0, 16))
          const mnemonic = bip39.entropyToMnemonic(entropy)

          if (!validateMnemonic(mnemonic)) {
            console.warn("Generated invalid mnemonic, falling back to random")
            return generateMnemonic()
          }

          return mnemonic
        } catch (err) {
          console.error("Error generating mnemonic from hash:", err)
          return generateMnemonic()
        }
      })
    }
  } catch (error) {
    console.error("Error in seed phrase generation:", error)
    return Promise.resolve(generateMnemonic())
  }
}

/**
 * Validates a seed phrase using BIP39
 * @param {string} seedPhrase - BIP39 mnemonic seed phrase
 * @returns {boolean} - True if valid, false otherwise
 */

function validateSeedPhraseLenient(seedPhrase: any, lenient = false) {
  if (!seedPhrase) return false

  // Normalize the seed phrase
  const normalizedPhrase = seedPhrase.trim().toLowerCase()

  // Check if it has exactly 12 words
  const words = normalizedPhrase.split(/\s+/)
  if (words.length !== 12) return false

  // Check if all words are in the dictionary
  const allWordsValid = words.every((word) =>
    bip39.wordlists.english.includes(word.trim()),
  )

  if (!allWordsValid) return false

  // If using lenient mode and all words are valid, accept it
  if (lenient && allWordsValid) {
    console.log("Using lenient validation for seed phrase with valid words")
    return true
  }

  // Otherwise do strict BIP39 validation
  return bip39.validateMnemonic(normalizedPhrase)
}

// Add utility function for seed phrase validation and fixing
export function validateAndFixSeedPhrase(seedPhrase) {
  // Normalize the seed phrase
  const normalizedPhrase = seedPhrase.trim().toLowerCase()

  // First check standard BIP39 validation
  if (validateMnemonic(normalizedPhrase)) {
    return normalizedPhrase // Already valid
  }

  // If not valid with strict validation, check with lenient validation
  if (validateSeedPhraseLenient(normalizedPhrase, true)) {
    console.log("Using lenient validation for seed phrase")
    return normalizedPhrase // Valid with lenient rules
  }

  // If still not valid, generate a new valid phrase
  console.warn("Invalid seed phrase, falling back to random mnemonic")
  return generateMnemonic()
}

export const clearAuthClientStorage = async (): Promise<boolean> => {
  return new Promise((resolve, reject) => {
    if (typeof window === "undefined" || !window.indexedDB) {
      console.warn("IndexedDB not available in this environment")
      resolve(false)
      return
    }

    const DB_NAME = "auth-client-db"
    const request = indexedDB.deleteDatabase(DB_NAME)
    console.log("Clearing auth storage...")
    request.onsuccess = () => {
      console.log("Auth storage cleared successfully")
      resolve(true)
    }

    request.onerror = (event) => {
      console.error(
        "Storage clearance error:",
        (event.target as IDBRequest).error,
      )
      reject((event.target as IDBRequest).error)
    }

    request.onblocked = () => {
      console.warn("Storage clearance blocked by open connections")
      resolve(false)
    }
  })
}
